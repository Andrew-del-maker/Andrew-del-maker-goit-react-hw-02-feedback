{"version":3,"sources":["Components/Statistic/Statistic.js","Components/Notification/Notification.js","Components/FeedbackOptions/FeedbackOptions.js","Components/Section/Section.js","Components/Feedback/Feedback.js","App.js","reportWebVitals.js","index.js"],"names":["Statistics","good","neutral","bad","total","positivePercentage","className","Notification","message","FeedbackOptions","options","onLeaveFeedback","map","mark","type","onClick","name","Section","title","children","Feedback","state","positive","visibility","event","target","setState","prevState","countTotalFeedback","this","Statistic","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAwBeA,EAtBI,SAAC,GAAD,IAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,QAASC,EAAlB,EAAkBA,IAAKC,EAAvB,EAAuBA,MAAOC,EAA9B,EAA8BA,mBAA9B,OAGf,sBAAKC,UAAU,kBAAf,UACoB,2CACA,uCAAUL,KACV,0CAAaC,KACb,sCAASC,KACT,wCAAWC,KACX,oDAAuBC,EAAvB,YCGTE,EAZM,SAAC,GAAD,IAAGC,EAAH,EAAGA,QAAH,OAIlB,4BAAKA,KC2BOC,EA/BS,SAAC,GACxB,IAD0BC,EAC3B,EAD2BA,QAASC,EACpC,EADoCA,gBAGhC,OAEI,8BACKD,EAAQE,KAAI,SAAAC,GACT,OACK,wBACLC,KAAK,SACLC,QAASJ,EACTK,KAAMH,EAHD,SAKJA,UCFFI,EAZC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OAAO,qCACH,6BAAKD,IACJC,MCiDMC,E,4MA3CXC,MAAQ,CACJpB,KAAM,EACNC,QAAS,EACTC,IAAK,EACLC,MAAO,EACPkB,SAAU,EACVC,YAAY,G,EAGhBZ,gBAAkB,SAACa,GACf,IAAOR,EAAQQ,EAAMC,OAAdT,KAEP,EAAKU,UAAS,SAACC,GAAD,sBACTX,EAAQW,EAAUX,GAAO,MAE9B,EAAKY,sB,EAETA,mBAAqB,WACjB,EAAKF,UAAS,SAAAC,GAAS,MAAK,CACxBvB,MAAOuB,EAAUvB,MAAQ,EACzBmB,YAAY,O,4CAMpB,WACI,IAAMD,EAAWO,KAAKR,MAAMpB,KAAO4B,KAAKR,MAAMjB,MAAQ,IAEtD,OAAO,qBAAKE,UAAU,YAAf,SACH,eAAC,EAAD,CAASY,MAAM,wBAAf,UACA,cAAC,EAAD,CAAiBR,QAHF,CAAC,OAAQ,UAAU,OAGKC,gBAAiBkB,KAAKlB,kBAE5DkB,KAAKR,MAAME,YACR,cAACO,EAAD,CAAY7B,KAAM4B,KAAKR,MAAMpB,KAAMC,QAAS2B,KAAKR,MAAMnB,QAASC,IAAK0B,KAAKR,MAAMlB,IAAKC,MAAOyB,KAAKR,MAAMjB,MAAOC,mBAAoBiB,KAGpIO,KAAKR,MAAME,YAAa,cAAC,EAAD,CAAcf,QAAQ,+B,GAtCrCuB,aCCRC,MANf,WACE,OACE,cAAC,EAAD,KCMWC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.19fe4928.chunk.js","sourcesContent":["import PropTypes from 'prop-types'\n\nconst Statistics = ({ good, neutral, bad, total, positivePercentage }) =>\n(\n    \n    <div className='statistic-field'>\n                        <h2>Statistic</h2>\n                        <p>Good: {good}</p>\n                        <p>Neutral: {neutral}</p>\n                        <p>Bad: {bad}</p>\n                        <p>Total: {total}</p>\n                        <p>Positive feedback: {positivePercentage} %</p>\n                    </div>\n    \n)\n\nStatistics.propTypes = {\n    good: PropTypes.number.isRequired,\n    neutral: PropTypes.number.isRequired,\n    bad: PropTypes.number.isRequired,\n    total: PropTypes.number.isRequired,\n    positivePercentage: PropTypes.number.isRequired,\n}\n\nexport default Statistics;","import PropTypes from 'prop-types'\n\nconst Notification = ({ message }) =>\n    \n(\n    \n   <p>{ message}</p>\n    \n)\n\nNotification.propTypes = {\n   message: PropTypes.string.isRequired,\n}\n\nexport default Notification;","import PropTypes from 'prop-types'\n\nconst FeedbackOptions = ({ options, onLeaveFeedback }) =>\n{\n    \n    return (\n    \n        <div>\n            {options.map(mark => {\n                return (\n                     <button\n                type=\"button\"\n                onClick={onLeaveFeedback}\n                name={mark}\n            >\n                {mark}\n            </button>\n                )\n            })}\n           \n    </div>\n    )\n}\n\nFeedbackOptions.propTypes = {\n    options: PropTypes.shape({\n        good: PropTypes.number,\n        neutral: PropTypes.number,\n        bad: PropTypes.number,\n    }).isRequired,\n    onLeaveFeedback: PropTypes.func.isRequired,\n}\n\nexport default FeedbackOptions;","import PropTypes from 'prop-types'\nconst Section = ({ title, children }) => {\n    return <>\n        <h1>{title}</h1>\n        {children}\n    </>\n}\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node.isRequired,\n}\n\nexport default Section;","//import PropTipes from 'prop-types'\nimport './Feedback.css'\nimport React, { Component } from 'react'\nimport Statistics from '../Statistic'\nimport Notification from '../Notification'\nimport FeedbackOptions from '../FeedbackOptions'\nimport Section from '../Section'\n\n\nclass Feedback extends Component{\n    state = {\n        good: 0,\n        neutral: 0,\n        bad: 0,\n        total: 0,\n        positive: 0,\n        visibility: false,\n    }\n    \n    onLeaveFeedback = (event) => {\n        const {name} = event.target;\n        \n        this.setState((prevState)=> ({\n            [name] : prevState[name] +1,\n        }))\n        this.countTotalFeedback();\n    }\n    countTotalFeedback = () => {\n        this.setState(prevState => ({\n            total: prevState.total + 1,\n            visibility: true,\n        }))\n\n    }\n    \n  \n    render() {\n        const positive = this.state.good / this.state.total * 100;\n        const arrayMarks = ['good', 'neutral','bad'];\n        return <div className=\"btn-field\">\n            <Section title=\"Please leave feedback\">\n            <FeedbackOptions options={arrayMarks } onLeaveFeedback={this.onLeaveFeedback}></FeedbackOptions>\n            \n            {this.state.visibility &&\n                <Statistics good={this.state.good} neutral={this.state.neutral} bad={this.state.bad} total={this.state.total} positivePercentage={positive} />\n                }\n                \n            {!this.state.visibility&& <Notification message=\"No feedback given\"/>}\n            </Section>\n            \n        </div>\n    }\n}\nexport default Feedback;\n","import './App.css';\n\nimport Feedback from './Components/Feedback';\n\nfunction App() {\n  return (\n    <Feedback/>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}